#!/usr/bin/env raku

# NOTE: To test a structure pulled from a JSON file, you'll need a JSON test
#       file to work with.  I snapshotted mine from ~/.zef/store/360.zef.pm .


use YAMLish;
use JSON::Fast;
use CBOR::Simple;
use BSON::Simple;
use BSON::Document;


# my @order  = < JSON::Fast CBOR::Simple BSON::Simple BSON::Document YAMLish .raku/EVAL >;
my @order  = < JSON::Fast CBOR::Simple BSON::Simple >;
my $length = @order.map(*.chars).max;


sub time-them(%by-codec) {
    my $count = $*COUNT;
    my $runs  = $*RUNS;
    my %times;

    for ^$runs {
        for @order -> $codec {
            my &test-code = %by-codec{$codec};
            my $ts = now;
            test-code() for ^$count;
            my $te = now;
            %times{$codec}.append($te - $ts);
        }
    }

    %times
}

sub show-times(Str:D $test, %times) {
    say "\n$test:";
    my $reference;
    for @order -> $codec {
        next unless %times{$codec} && my $fastest = %times{$codec}.min;
        if $reference {
            printf "%-{$length}s  %8.3fs (%.3fx)\n",
                   $codec, $fastest, $fastest / $reference;
        }
        else {
            printf "%-{$length}s  %8.3fs\n", $codec, $fastest;
            $reference = $fastest;
        }
    }
}

sub time-and-show(Str:D $test, %by-codec) {
    show-times($test, time-them(%by-codec));
}

sub show-sizes(%blobs) {
    say "\nSizes:";
    my $reference;
    for @order -> $codec {
        next unless my $blob = %blobs{$codec};
        my $size = $blob.bytes;

        if $reference {
            printf "%-{$length}s  %8d (%.3fx)\n",
                   $codec, $size, $size / $reference;
        }
        else {
            printf "%-{$length}s  %8d\n", $codec, $size;
            $reference = $size;
        }
    }
}

sub show-fidelity(%by-codec, $reference) {
    say "\nFidelity:";

    for @order -> $codec {
        next unless my $decoder = %by-codec{$codec};
        my $decoded = $decoder();

        printf "%-{$length}s  %8s\n",
               $codec, $decoded eqv $reference ?? 'pass' !! 'FAIL';
    }
}


sub time-codecs(Str:D $variant, $struct) {
    say "\n====> $variant <====";

    use MONKEY-SEE-NO-EVAL;
    my $*BSON_SIMPLE_PLAIN_HASHES = True;
    my $*BSON_SIMPLE_PLAIN_BLOBS  = True;

    my $yaml = save-yaml($struct).encode;
    my $raku = $struct.raku.encode;
    my $json = to-json($struct, :!pretty).encode;
    my $bson = bson-encode { b => $struct };
    my $cbor = cbor-encode $struct;

    my $doc  = BSON::Document.new($bson);
    my $doce = $doc.encode;

    my %blobs := {
        'JSON::Fast'     => $json,
        'CBOR::Simple'   => $cbor,
        'BSON::Simple'   => $bson,
        'BSON::Document' => $doce,
        '.raku/EVAL'     => $raku,
        'YAMLish'        => $yaml,
    };

    my %encoders := {
        'JSON::Fast'     => { my $j = to-json($struct, :!pretty).encode },
        'CBOR::Simple'   => { my $c = cbor-encode $struct },
        'BSON::Simple'   => { my $b = bson-encode { b => $struct } },
        'BSON::Document' => { my $d = $doc.encode },
        '.raku/EVAL'     => { my $r = $struct.raku.encode },
        'YAMLish'        => { my $y = save-yaml($struct).encode },
    };

    my %decoders := {
        'JSON::Fast'     => { my $j = from-json $json.decode },
        'CBOR::Simple'   => { my $c = cbor-decode $cbor },
        'BSON::Simple'   => { my $b = bson-decode($bson)<b> },
        'BSON::Document' => { my $d = BSON::Document.new($doce)<b> },
        '.raku/EVAL'     => { my $r = EVAL $raku.decode },
        'YAMLish'        => { my $y = load-yaml $yaml.decode },
    };

    show-sizes(%blobs);
    show-fidelity(%decoders, $struct);
    time-and-show('Encode', %encoders);
    time-and-show('Decode', %decoders);
}


#| Compare serialization codec performance and fidelity
multi MAIN(
    UInt:D :$runs   = 1,    #= Runs per test (for stable results)
    UInt:D :$count  = 10,   #= Encodes/decodes per run (for sufficient duration)
    IO()   :$source = 'fez-test.json'  #= Test file containing JSON data
) {
    say "Testing $runs run{$runs == 1 ?? '' !! 's'} of $count iteration{$count == 1 ?? '' !! 's'} each";

    my $*COUNT = $count;
    my $*RUNS  = $runs;

    my $json      = $source.slurp;
    my $from-json = from-json $json;
    time-codecs('JSON source', $from-json);

    my $AoA-Int = [ [$++ xx 100] xx 100 ];
    time-codecs('100 x 100 Int array', $AoA-Int);

    my $AoA-Num = [ [rand xx 100] xx 100 ];
    time-codecs('100 x 100 Num array', $AoA-Num);

    my $AoA-Rat = [ [((^256).pick / (1..255).pick) xx 100] xx 100 ];
    time-codecs('100 x 100 small Rat array', $AoA-Rat);

    my $buf8 = buf8.new((^256).roll(100_000));
    time-codecs('100_000 byte buf8', $buf8);

    my $na32 = array[num32].new(rand xx 10_000);
    time-codecs('10_000 entry array[num32]', $na32);

    my $na64 = array[num64].new(rand xx 10_000);
    time-codecs('10_000 entry array[num64]', $na64);
}
